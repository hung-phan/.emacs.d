This is Indium.info, produced by makeinfo version 5.2 from Indium.texi.

     Indium 0.6.1, Jun 09, 2017

     Nicolas Petton

     Copyright © 2017, Nicolas Petton

INFO-DIR-SECTION Emacs
START-INFO-DIR-ENTRY
* Indium: (Indium.info). JavaScript development environment for Emacs.
END-INFO-DIR-ENTRY


   Generated by Sphinx 1.5.5.


File: Indium.info,  Node: Top,  Next: Table of contents,  Up: (dir)

Indium Documentation
********************

     Indium 0.6.1, Jun 09, 2017

     Nicolas Petton

     Copyright © 2017, Nicolas Petton

Indium is a JavaScript development environment for Emacs(1).

Indium is Free Software, licensed under the GPL v3.0.  You can follow
its development on GitHub(2).

Indium connects to a browser tab or nodejs process and provides several
features for JavaScript development, including:

   * a REPL (with auto completion) & object inspection;

   * an inspector, with history and navigation;

   * a scratch buffer (‘M-x indium-scratch’);

   * JavaScript evaluation in JS buffers with ‘indium-interaction-mode’;

   * a stepping Debugger, similar to ‘edebug’, or ‘cider’.

This documentation can be read online at
‘https://indium.readthedocs.io’.

It is also available in Info format and can be consulted from within
Emacs with ‘C-h i m indium RET’.

* Menu:

* Table of contents:: 
* Indices and tables:: 

 — The Detailed Node Listing —

Table of contents

* Installation:: 
* Getting up and running:: 
* The REPL:: 
* Interaction in JS buffers:: 
* The stepping debugger:: 
* The inspector:: 
* Network:: 

Installation

* Using MELPA:: 
* Manual installation:: 

Getting up and running

* NodeJS:: 
* Chrome/Chromium:: 
* Using local files when debugging:: 

NodeJS

* Installing a recent version of NodeJS:: 
* Executing NodeJS from Emacs:: 
* Connecting to a Nodejs process:: 

The REPL

* Starting a REPL:: 
* Using the REPL:: 
* Code evaluation & context:: 

Using the REPL

* Keybindings:: 
* Reconnecting from the REPL buffer:: 

Interaction in JS buffers

* Evaluating and inspecting:: 
* Switching to the REPL buffer:: 
* Adding and removing breakpoints:: 
* Live code update (hot-swapping JavaScript sources): Live code update hot-swapping JavaScript sources. 

The inspector

* Using the inspector:: 


   ---------- Footnotes ----------

   (1) http://gnu.org/software/emacs

   (2) https://github.com/NicolasPetton/indium


File: Indium.info,  Node: Table of contents,  Next: Indices and tables,  Prev: Top,  Up: Top

1 Table of contents
*******************

* Menu:

* Installation:: 
* Getting up and running:: 
* The REPL:: 
* Interaction in JS buffers:: 
* The stepping debugger:: 
* The inspector:: 
* Network:: 


File: Indium.info,  Node: Installation,  Next: Getting up and running,  Up: Table of contents

1.1 Installation
================

     Note: If you already have installed ‘Jade’, you should read the
     migration-from-jade page first.

Indium supports ‘Emacs 25.1+’, ‘Chrome 54.0+’ (debugging protocol
‘v1.2’) and ‘NodeJS 7+’.

Indium is availabe on MELPA(1), MELPA Stable(2).

* Menu:

* Using MELPA:: 
* Manual installation:: 

   ---------- Footnotes ----------

   (1) https://melpa.org

   (2) https://stable.melpa/org


File: Indium.info,  Node: Using MELPA,  Next: Manual installation,  Up: Installation

1.1.1 Using MELPA
-----------------

Unless you are already using MELPA, you will have to setup ‘package.el’
to use MELPA or MELPA Stable repositories.  You can follow this
documentation(1).

You can install Indium with the following command:

     M-x package-install [RET] indium [RET]

or by adding this bit of Emacs Lisp code to your Emacs initialization
file (‘.emacs’ or ‘init.el’):

     (unless (package-installed-p 'indium)
       (package-install 'indium))

If the installation doesn’t work try refreshing the package list:

     M-x package-refresh-contents [RET]

   ---------- Footnotes ----------

   (1) https://melpa.org/#/getting-started


File: Indium.info,  Node: Manual installation,  Prev: Using MELPA,  Up: Installation

1.1.2 Manual installation
-------------------------

If you want to install Indium manually, make sure to install
‘websocket.el’.  Obtain the code of Indium from the repository(1).

Add the following to your Emacs configuration:

     ;; load Indium from its source code
     (add-to-list 'load-path "~/projects/indium")
     (require 'indium)

   ---------- Footnotes ----------

   (1) https://github.com/NicolasPetton/indium


File: Indium.info,  Node: Getting up and running,  Next: The REPL,  Prev: Installation,  Up: Table of contents

1.2 Getting up and running
==========================

* Menu:

* NodeJS:: 
* Chrome/Chromium:: 
* Using local files when debugging:: 


File: Indium.info,  Node: NodeJS,  Next: Chrome/Chromium,  Up: Getting up and running

1.2.1 NodeJS
------------

Nodejs >= ‘7.4’ is required for Indium to work.

* Menu:

* Installing a recent version of NodeJS:: 
* Executing NodeJS from Emacs:: 
* Connecting to a Nodejs process:: 


File: Indium.info,  Node: Installing a recent version of NodeJS,  Next: Executing NodeJS from Emacs,  Up: NodeJS

1.2.1.1 Installing a recent version of NodeJS
.............................................

If your distribution ships an old version of NodeJS, you can install a
more recent version using nvm(1):

     $ curl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.2/install.sh | bash

Once ‘nvm’ is install, you can easily install and use the version of
NodeJS you want:

     $ nvm install v7
     $ nvm alias default v7
     $ node --version

If you install NodeJS using ‘nvm’, chances are that Emacs won’t have it
in its ‘exec path’.  A simple solution is to use the excellent
exec-path-from-shell(2) package.

   ---------- Footnotes ----------

   (1) https://github.com/creationix/nvm

   (2) https://github.com/purcell/exec-path-from-shell


File: Indium.info,  Node: Executing NodeJS from Emacs,  Next: Connecting to a Nodejs process,  Prev: Installing a recent version of NodeJS,  Up: NodeJS

1.2.1.2 Executing NodeJS from Emacs
...................................

Indium can start NodeJS processes and connect to them automatically.
This is the preferred way of using Indium with NodeJS.

Start a process with ‘M-x indium-run-node’.  Once the process is ready,
Indium will connect to it and open a REPL buffer.

The output from the NodeJS process is appended to the ‘*nodejs process*’
buffer.

     Note: Indium will append the ‘--inspect’ and ‘--debug-brk’ flags to
     the command-line arguments automatically, so you do not need to
     provide them.


File: Indium.info,  Node: Connecting to a Nodejs process,  Prev: Executing NodeJS from Emacs,  Up: NodeJS

1.2.1.3 Connecting to a Nodejs process
......................................

To connect to an existing NodeJS process, make sure that process was
started with the ‘--inspect’ flag:

     node --inspect myfile.js

If you wish to break on the first line of the application code, start
node using:

     node --inspect --debug-brk myfile.js

Node will tell you to open an URL in Chrome:

     chrome-devtools://inspector.html?...&ws=127.0.0.1:PORT/PATH

Evaluate ‘M-x indium-connect-to-nodejs RET 127.0.0.1 RET PORT RET PATH’,
‘PORT’ and ‘PATH’ are the ones from the ‘ws’ parameter of the above URL.

Connecting Indium to the node process will open a debugger on the first
line of the application code if you passed the CLI argument
‘--debug-brk’.


File: Indium.info,  Node: Chrome/Chromium,  Next: Using local files when debugging,  Prev: NodeJS,  Up: Getting up and running

1.2.2 Chrome/Chromium
---------------------

Chrome/Chromium >= ‘54.0’ is required for Indium to properly work
(debugging protocol ‘v1.2’).

Start Chrome/Chromium with the ‘--remote-debugging-port’ flag like the
following:

     chromium --remote-debugging-port=9222 https://localhost:3000

Make sure that no instance of Chrome is already running, otherwise
Chrome will simply open a new tab on the existing Chrome instance, and
the ‘remote-debugging-port’ will not be set.

To connect to a tab, run from Emacs:

     M-x indium-connect-to-chrome


File: Indium.info,  Node: Using local files when debugging,  Prev: Chrome/Chromium,  Up: Getting up and running

1.2.3 Using local files when debugging
--------------------------------------

Indium can use local files when debugging, or to set breakpoints.

     Hint: When using ‘NodeJS’, or when the connected tab uses the
     ‘file://’ URL, Indium will by itself use local files from disk.  In
     this case there is nothing to setup.

If the Chrome connection uses the ‘http://’ or ‘https://’ protocol, you
will have to tell Indium where to find the corresponding JavaScript
files on disk by setting up a workspace.

To do that, place an empty ‘.indium’ marker file in the root folder
where your `web server serves static files'.

The root folder where the ‘.indium’ file should be put is not always the
directory that contains your JavaScript files.  It should be the root
folder containing static files.  Most of the time, it is at least one
level above.

Given the following project structure:

     project/ (current directory)
        www/
           index.html
           css/
              style.css
           js/
              app.js
           .indium

Indium will lookup the file ‘www/js/app.js’ for the URL
"‘http://localhost:3000/js/app.js’".

     Warning: In order for this setup to work, make sure to call
     ‘indium-connect-to-chrome’ from somewhere within the workspace
     directory!


File: Indium.info,  Node: The REPL,  Next: Interaction in JS buffers,  Prev: Getting up and running,  Up: Table of contents

1.3 The REPL
============

* Menu:

* Starting a REPL:: 
* Using the REPL:: 
* Code evaluation & context:: 


File: Indium.info,  Node: Starting a REPL,  Next: Using the REPL,  Up: The REPL

1.3.1 Starting a REPL
---------------------

A REPL (Read Eval Print Loop) buffer is automatically open when a new
Indium connection is made (see *note Getting up and running: 9.).

 [image src="repl.png" ]

The REPL offers the following features:

   * Auto completion with ‘company-mode’

   * JS syntax highlighting

   * Pretty printing and preview of printed values

   * Access to the object inspector (see *note The inspector: 17.)

 [image src="repl2.png" ]


File: Indium.info,  Node: Using the REPL,  Next: Code evaluation & context,  Prev: Starting a REPL,  Up: The REPL

1.3.2 Using the REPL
--------------------

* Menu:

* Keybindings:: 
* Reconnecting from the REPL buffer:: 


File: Indium.info,  Node: Keybindings,  Next: Reconnecting from the REPL buffer,  Up: Using the REPL

1.3.2.1 Keybindings
...................

Here is the list of available keybindings in a REPL buffer:

Keybinding        Description
                  
---------------------------------------------------------------------------------------------------------------
                  
‘RET’             Evalute the current input.  When the point is on a printed object, inspect the object.
                  
                  
‘C-RET’           Insert a newline.
                  
                  
‘C-c M-i’         Evalute the current input and open an inspector on the result.
                  
                  
‘C-c C-o’         Clear the output.
                  
                  
‘C-c C-q’         Kill the REPL buffer and close the current connection.
                  
                  
‘M-n’             Insert the previous input in the history.
                  
                  
‘M-p’             Instert the next input in the history.
                  


File: Indium.info,  Node: Reconnecting from the REPL buffer,  Prev: Keybindings,  Up: Using the REPL

1.3.2.2 Reconnecting from the REPL buffer
.........................................

When a connection is closed (most probably because other devtools were
open on the same runtime), the REPL will display two buttons, one to try
to reopen the connection, and another one to kill Emacs buffers using
this connection (the REPL buffer, inspectors & debuggers).


File: Indium.info,  Node: Code evaluation & context,  Prev: Using the REPL,  Up: The REPL

1.3.3 Code evaluation & context
-------------------------------

When evaluating code in the REPL, Indium will always run the code on the
current execution context.

This means that while debugging, code execution will happen in the
context of the current stack frame, and will be able to access local
variables from the stack, etc.


File: Indium.info,  Node: Interaction in JS buffers,  Next: The stepping debugger,  Prev: The REPL,  Up: Table of contents

1.4 Interaction in JS buffers
=============================

Indium comes with a minor mode called ‘indium-interaction-mode’ for
interactive programming.  To enable it in all JavaScript buffers, add
something like the following to your Emacs configuration:

     (require 'indium)
     (add-hook 'js-mode-hook #'indium-interaction-mode)

When ‘indium-interaction-mode’ is on, you can evaluate code, inspect
objects and add or remove breakpoints from your buffers.

* Menu:

* Evaluating and inspecting:: 
* Switching to the REPL buffer:: 
* Adding and removing breakpoints:: 
* Live code update (hot-swapping JavaScript sources): Live code update hot-swapping JavaScript sources. 


File: Indium.info,  Node: Evaluating and inspecting,  Next: Switching to the REPL buffer,  Up: Interaction in JS buffers

1.4.1 Evaluating and inspecting
-------------------------------

Here’s a list of available keybindings:

   - ‘C-x C-e’: Evaluate the JavaScript expression preceding the point.

   - ‘C-M-x’: Evaluate the innermost function enclosing the point.

   - ‘C-c M-i’: Inspect the result of the evaluation of an expression
     (see *note The inspector: 17.).

   - ‘M-x indium-eval-buffer’: Evaluate the entire buffer.


File: Indium.info,  Node: Switching to the REPL buffer,  Next: Adding and removing breakpoints,  Prev: Evaluating and inspecting,  Up: Interaction in JS buffers

1.4.2 Switching to the REPL buffer
----------------------------------

Press ‘C-c C-z’ from any buffer with ‘indium-interaction-mode’ turned on
to switch back to the REPL buffer (see *note The REPL: 14.).


File: Indium.info,  Node: Adding and removing breakpoints,  Next: Live code update hot-swapping JavaScript sources,  Prev: Switching to the REPL buffer,  Up: Interaction in JS buffers

1.4.3 Adding and removing breakpoints
-------------------------------------

You need to first make sure that Indium is set up correctly to use local
files (see *note Using local files when debugging: 11.).

   - ‘C-c b b’: Add a breakpoint

   - ‘C-c b c’: Add a conditional breakpoint

   - ‘C-c b k’: Remove a breakpoint

   - ‘C-c b K’: Remove all breakpoints from the current buffer

   - ‘C-c b e’: Edit condition of a breakpoint

   - ‘C-c b l’: List all breakpoints and easily jump to any breakpoint

   - ‘C-c b d’: Deactivate all breakpoints (the runtime won’t pause when
     hitting a breakpoint)

   - ‘C-c b a’: Activate all breakpoints (it has no effect if
     breakpoints have not been deactivated)

Once a breakpoint is set, execution will stop when a breakpoint is hit,
and the Indium debugger pops up (see *note The stepping debugger: 22.).

     Note: Breakpoints are persistent: if the connection is closed, when
     a new connection is made Indium will attempt to add back all
     breakpoints.


File: Indium.info,  Node: Live code update hot-swapping JavaScript sources,  Prev: Adding and removing breakpoints,  Up: Interaction in JS buffers

1.4.4 Live code update (hot-swapping JavaScript sources)
--------------------------------------------------------

Indium supports live code updates without the need to reload the browser
tab or restart the nodejs process.

This feature works with by hot-swapping the script source, and works
even with lexical closures.

     Note: This feature is, for now, only available for Chrome &
     Chromium.

     Warning: Stability issues have been reported when using this
     feature with Chrome 57 and earlier.  We strongly encourage you to
     use Chrome >= 58 when using live code updates.

To enable live updates, make sure Indium is set up to use local files
(see *note Using local files when debugging: 11.).

   - ‘C-c C-k’: Updates the runtime JavaScript source with the contents
     of the current buffer.

   - ‘(setq indium-update-script-on-save t)’: Automatically update the
     runtime script JavaScript source after each buffer save.

You can setup a hook to be run after each script update.  For example

     (add-hook 'indium-update-script-source-hook
             (lambda (url)
               (indium-eval (format "window.dispatchEvent(new CustomEvent('patch', {detail: {url: '%s'}}))"
                                    url))))

Then you can use it in your app for development purposes

     window.addEventListener("patch", (event) => {
       console.log("Patched @ " + new Date().toTimeString().substring(0, 8), event.detail.url);
       // rerender, etc
     });


File: Indium.info,  Node: The stepping debugger,  Next: The inspector,  Prev: Interaction in JS buffers,  Up: Table of contents

1.5 The stepping debugger
=========================


File: Indium.info,  Node: The inspector,  Next: Network,  Prev: The stepping debugger,  Up: Table of contents

1.6 The inspector
=================

Indium features an object inspector that can be open on any object
reference from a REPL buffer (see *note The REPL: 14.), the debugger
(see *note The stepping debugger: 22.), or the result of any evaluation
of JavaScript code (see *note Interaction in JS buffers: 1c.).

To inspect the result of the evaluation of an expression, press ‘C-c
M-i’.  An inspector buffer will pop up.  You can also press ‘RET’ or
left click on object links from the REPL buffer.

 [image src="inspector.png" ]

* Menu:

* Using the inspector:: 


File: Indium.info,  Node: Using the inspector,  Up: The inspector

1.6.1 Using the inspector
-------------------------

Here is a list of available keybindings in an inspector buffer:

Keybinding               Description
                         
---------------------------------------------------------------------------------------------------------------
                         
‘RET’                    Follow a link to inspect the object at point
                         
                         
‘l’                      Pop to the previous inspected object
                         
                         
‘g’                      Update the inspector buffer
                         
                         
‘n’ or ‘TAB’             Jump to the next object in the inspector
                         
                         
‘p’ or ‘s-TAB’           Jump to the previous object in the inspector
                         


File: Indium.info,  Node: Network,  Prev: The inspector,  Up: Table of contents

1.7 Network
===========

You can disable or enable network cache using the following commands:

     M-x indium-webkit-disable-cache
     M-x indium-webkit-enable-cache

Both commands save your choice which will be used for future Indium
connections for the current Emacs session.

You can make the cache setting permament by setting
‘indium-webkit-cache-disabled’:

     (setq indium-webkit-cache-disabled t)


File: Indium.info,  Node: Indices and tables,  Prev: Table of contents,  Up: Top

2 Indices and tables
********************

   * genindex

   * modindex

   * search



Tag Table:
Node: Top334
Ref: index doc542
Ref: 0542
Ref: Top-Footnote-12321
Ref: Top-Footnote-22359
Node: Table of contents2407
Ref: index table-of-contents2503
Ref: 12503
Ref: index indium2503
Ref: 22503
Node: Installation2704
Ref: installation installation2801
Ref: 32801
Ref: installation doc2801
Ref: 42801
Ref: Installation-Footnote-13193
Ref: Installation-Footnote-23219
Node: Using MELPA3252
Ref: installation using-melpa3340
Ref: 53340
Ref: Using MELPA-Footnote-13966
Node: Manual installation4010
Ref: installation manual-installation4098
Ref: 64098
Ref: Manual installation-Footnote-14483
Node: Getting up and running4531
Ref: setup doc4645
Ref: 74645
Ref: setup getting-up-and-running4645
Ref: 84645
Ref: setup up-and-running4645
Ref: 94645
Node: NodeJS4781
Ref: setup id14870
Ref: a4870
Ref: setup nodejs4870
Ref: b4870
Node: Installing a recent version of NodeJS5072
Ref: setup installing-a-recent-version-of-nodejs5188
Ref: c5188
Ref: Installing a recent version of NodeJS-Footnote-15858
Ref: Installing a recent version of NodeJS-Footnote-25900
Node: Executing NodeJS from Emacs5956
Ref: setup executing-nodejs-from-emacs6111
Ref: d6111
Node: Connecting to a Nodejs process6692
Ref: setup connecting-to-a-nodejs-process6801
Ref: e6801
Node: Chrome/Chromium7573
Ref: setup chrome7703
Ref: f7703
Ref: setup chrome-chromium7703
Ref: 107703
Node: Using local files when debugging8267
Ref: setup local-files8382
Ref: 118382
Ref: setup using-local-files-when-debugging8382
Ref: 128382
Node: The REPL9719
Ref: repl the-repl9846
Ref: 139846
Ref: repl repl9846
Ref: 149846
Ref: repl doc9846
Ref: 159846
Node: Starting a REPL9955
Ref: repl starting-a-repl10038
Ref: 1610038
Node: Using the REPL10513
Ref: repl using-the-repl10630
Ref: 1810630
Node: Keybindings10739
Ref: repl keybindings10843
Ref: 1910843
Node: Reconnecting from the REPL buffer11849
Ref: repl reconnecting-from-the-repl-buffer11953
Ref: 1a11953
Node: Code evaluation & context12312
Ref: repl code-evaluation-context12405
Ref: 1b12405
Node: Interaction in JS buffers12739
Ref: code-evaluation interaction12865
Ref: 1c12865
Ref: code-evaluation doc12865
Ref: 1d12865
Ref: code-evaluation interaction-in-js-buffers12865
Ref: 1e12865
Node: Evaluating and inspecting13555
Ref: code-evaluation evaluating-and-inspecting13679
Ref: 1f13679
Node: Switching to the REPL buffer14112
Ref: code-evaluation switching-to-the-repl-buffer14276
Ref: 2014276
Node: Adding and removing breakpoints14490
Ref: code-evaluation adding-and-removing-breakpoints14677
Ref: 2114677
Node: Live code update hot-swapping JavaScript sources15731
Ref: code-evaluation live-code-update-hot-swapping-javascript-sources15881
Ref: 2315881
Node: The stepping debugger17378
Ref: debugger doc17509
Ref: 2417509
Ref: debugger debugger17509
Ref: 2217509
Ref: debugger the-stepping-debugger17509
Ref: 2517509
Node: The inspector17562
Ref: inspector the-inspector17675
Ref: 2617675
Ref: inspector inspector17675
Ref: 1717675
Ref: inspector doc17675
Ref: 2717675
Node: Using the inspector18248
Ref: inspector using-the-inspector18317
Ref: 2818317
Node: Network19220
Ref: network doc19303
Ref: 2919303
Ref: network network19303
Ref: 2a19303
Ref: network id119303
Ref: 2b19303
Node: Indices and tables19718
Ref: index indices-and-tables19802
Ref: 2c19802

End Tag Table


Local Variables:
coding: utf-8
End:
